from __future__ import absolute_import, unicode_literals

import pytest

from psd_tools.constants import UnitFloatType
from psd_tools.psd.descriptor import (TYPES, Descriptor, Reference, Double, String, Bool, LargeInteger, Integer,
                                      UnitFloat)
from ..utils import check_write_read, check_read_write

DESCRIPTOR_DATA = [
    (b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00null\x00\x00\x00\x01\x00\x00'
     b'\x00\x11generatorSettingsObjc\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00'
     b'null\x00\x00\x00\x02\x00\x00\x00\x05cremaObjc\x00\x00\x00\x01\x00\x00'
     b'\x00\x00\x00\x00null\x00\x00\x00\x01\x00\x00\x00\x04jsonTEXT\x00\x00'
     b'\x01\x9f\x00{\x00"\x00a\x00s\x00s\x00e\x00t\x00S\x00e\x00t\x00t\x00i'
     b'\x00n\x00g\x00s\x00"\x00:\x00[\x00{\x00"\x00f\x00i\x00l\x00e\x00"\x00:'
     b'\x00"\x00l\x00a\x00y\x00e\x00r\x00-\x00e\x00f\x00f\x00e\x00c\x00t\x00s'
     b'\x00.\x00s\x00v\x00g\x00"\x00,\x00"\x00n\x00a\x00m\x00e\x00"\x00:\x00"'
     b'\x00"\x00,\x00"\x00e\x00x\x00t\x00e\x00n\x00s\x00i\x00o\x00n\x00"\x00:'
     b'\x00"\x00s\x00v\x00g\x00"\x00,\x00"\x00i\x00n\x00t\x00e\x00r\x00p\x00o'
     b'\x00l\x00a\x00t\x00i\x00o\x00n\x00T\x00y\x00p\x00e\x00"\x00:\x00"\x00b'
     b'\x00i\x00c\x00u\x00b\x00i\x00c\x00A\x00u\x00t\x00o\x00m\x00a\x00t\x00i'
     b'\x00c\x00"\x00,\x00"\x00m\x00e\x00t\x00a\x00d\x00a\x00t\x00a\x00T\x00y'
     b'\x00p\x00e\x00"\x00:\x00"\x00n\x00o\x00n\x00e\x00"\x00,\x00"\x00s\x00c'
     b'\x00a\x00l\x00e\x00"\x00:\x001\x00,\x00"\x00u\x00s\x00e\x00I\x00C\x00C'
     b'\x00P\x00r\x00o\x00f\x00i\x00l\x00e\x00"\x00:\x00"\x00s\x00R\x00G\x00B'
     b'\x00 \x00I\x00E\x00C\x006\x001\x009\x006\x006\x00-\x002\x00.\x001\x00"'
     b'\x00,\x00"\x00e\x00m\x00b\x00e\x00d\x00I\x00C\x00C\x00P\x00r\x00o\x00f'
     b'\x00i\x00l\x00e\x00"\x00:\x00f\x00a\x00l\x00s\x00e\x00}\x00]\x00,\x00"'
     b'\x00d\x00o\x00c\x00S\x00e\x00t\x00t\x00i\x00n\x00g\x00s\x00"\x00:\x00{'
     b'\x00"\x00e\x00x\x00t\x00e\x00n\x00s\x00i\x00o\x00n\x00"\x00:\x00"\x00s'
     b'\x00v\x00g\x00"\x00,\x00"\x00q\x00u\x00a\x00l\x00i\x00t\x00y\x00"\x00:'
     b'\x00"\x001\x000\x000\x00"\x00,\x00"\x00i\x00n\x00t\x00e\x00r\x00p\x00o'
     b'\x00l\x00a\x00t\x00i\x00o\x00n\x00T\x00y\x00p\x00e\x00"\x00:\x00"\x00b'
     b'\x00i\x00c\x00u\x00b\x00i\x00c\x00A\x00u\x00t\x00o\x00m\x00a\x00t\x00i'
     b'\x00c\x00"\x00,\x00"\x00m\x00e\x00t\x00a\x00d\x00a\x00t\x00a\x00T\x00y'
     b'\x00p\x00e\x00"\x00:\x00"\x00n\x00o\x00n\x00e\x00"\x00,\x00"\x00u\x00s'
     b'\x00e\x00I\x00C\x00C\x00P\x00r\x00o\x00f\x00i\x00l\x00e\x00"\x00:\x00"'
     b'\x00s\x00R\x00G\x00B\x00 \x00I\x00E\x00C\x006\x001\x009\x006\x006\x00-'
     b'\x002\x00.\x001\x00"\x00}\x00,\x00"\x00a\x00s\x00s\x00e\x00t\x00S\x00i'
     b'\x00z\x00e\x00s\x00"\x00:\x00[\x00{\x00"\x00s\x00c\x00a\x00l\x00e\x00"'
     b'\x00:\x001\x00,\x00"\x00s\x00u\x00f\x00f\x00i\x00x\x00"\x00:\x00"\x00"'
     b'\x00}\x00]\x00,\x00"\x00c\x00r\x00e\x00m\x00a\x00V\x00e\x00r\x00s\x00i'
     b'\x00o\x00n\x00"\x00:\x00"\x001\x00.\x001\x00"\x00}\x00\x00\x00\x00\x00'
     b'\tlayerTimedoubA\xd6KM\x8a\t\xe0\xdb'),
    (b'\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00null\x00\x00'
     b'\x00\x01\x00\x00\x00\x00PtrnObjc\x00\x00\x00\x01\x00\x00\x00\x00\x00'
     b'\x00Ptrn\x00\x00\x00\x02\x00\x00\x00\x00Nm  TEXT\x00\x00\x008\x00$\x00$'
     b'\x00$\x00/\x00P\x00a\x00t\x00t\x00e\x00r\x00n\x00s\x00/\x00D\x00e\x00f'
     b'\x00a\x00u\x00l\x00t\x00s\x00/\x00H\x00o\x00r\x00i\x00z\x00o\x00n\x00t'
     b'\x00a\x00l\x00L\x00i\x00n\x00e\x001\x00=\x00H\x00o\x00r\x00i\x00z\x00o'
     b'\x00n\x00t\x00a\x00l\x00 \x00L\x00i\x00n\x00e\x00 \x001\x00\x00\x00\x00'
     b'\x00\x00IdntTEXT\x00\x00\x00%\x005\x00e\x00a\x00a\x003\x000\x00c\x007'
     b'\x00-\x006\x008\x008\x00d\x00-\x001\x001\x007\x007\x00-\x00b\x002\x00e'
     b'\x005\x00-\x00b\x007\x001\x005\x00d\x004\x00e\x002\x00a\x006\x003\x005'
     b'\x00\x00'),
]


@pytest.mark.parametrize('cls', [TYPES[key] for key in TYPES])
def test_empty_wr(cls):
    check_write_read(cls())


@pytest.mark.parametrize('fixture', DESCRIPTOR_DATA)
def test_descriptor_rw(fixture):
    check_read_write(Descriptor, fixture)


@pytest.mark.parametrize('fixture', [(b'\x00\x00\x00\x01name\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00name\x00'
                                      b'\x00\x00\x030j0W\x00\x00')])
def test_reference_rw(fixture):
    check_read_write(Reference, fixture)


@pytest.mark.parametrize('kls, value', [
    (Double, 1.),
    (String, ''),
    (Bool, True),
    (LargeInteger, 1),
    (Integer, 1),
])
def test_value_elements(kls, value):
    fixture = kls(value)
    assert fixture == value


@pytest.mark.parametrize('unit, value', [
    (UnitFloatType.PIXELS, 100.0),
    (UnitFloatType.POINTS, 0.0),
])
def test_unit_float(unit, value):
    fixture = UnitFloat(unit=unit, value=value)
    assert fixture == value
    assert fixture + 1.0
    assert isinstance(float(fixture), float)
